name: 2.11.5 Build push and release Docker images and Helm chart
on:
  workflow_dispatch:

env:
  COMMIT: ${{ github.sha }}
  REPOSITORY_OWNER: ${{ vars.GCP_PROJECT_ID }}/rancher-images
  IMAGE: ${{ vars.GCP_PROJECT_ID }}/rancher-images/rancher-images
  IMAGE_AGENT: ${{ vars.GCP_PROJECT_ID }}/rancher-images/rancher-images
  IMAGE_INSTALLER: ${{ vars.GCP_PROJECT_ID }}/rancher-images/rancher-images
  REGISTRY: "us-east1-docker.pkg.dev"
  TAG: 2.11.5  # Hardcoded for 2.11.5
  VERSION: 2.11.5  # Hardcoded for Docker builds
  RKE_VERSION: v1.4.4  # Adjust based on build.yaml or data.json
  CATTLE_RANCHER_WEBHOOK_VERSION: v0.2.5  # Adjust based on build.yaml
  CATTLE_RANCHER_PROVISIONING_CAPI_VERSION: v1.0.0  # Adjust based on build.yaml
  CATTLE_CSP_ADAPTER_MIN_VERSION: v1.0.0  # Adjust based on build.yaml
  CATTLE_FLEET_VERSION: v0.6.0  # Adjust based on build.yaml
  CATTLE_DEFAULT_SHELL_VERSION: rancher/shell:v0.1.0  # Adjust based on build.yaml
  CATTLE_REMOTEDIALER_PROXY_VERSION: v0.3.0  # Adjust based on build.yaml

jobs:
  build-server:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux]
        arch: [x64, arm64]
    permissions:
      contents: read
      id-token: write
    env:
      ARCH: ${{ matrix.arch }}
    steps:
      - name: Arch environment variable
        shell: bash
        run: |
          if [[ "$ARCH" == "x64" ]]; then
            echo "ARCH=amd64" >> $GITHUB_ENV
          fi
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set Artifact Registry Username
        run: |
          echo "GCP_USERNAME=_json_key" >> $GITHUB_ENV
      - name: Login to Artifact Registry
        uses: docker/login-action@v3
        with:
          username: ${{ env.GCP_USERNAME }}
          password: ${{ secrets.GCP_ARTIFACT_REGISTRY_KEY }}
          registry: ${{ env.REGISTRY }}
      - name: Debug environment variables
        run: |
          echo "TAG=${{ env.TAG }}"
          echo "VERSION=${{ env.VERSION }}"
          env | sort
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE }}
          flavor: |
            latest=false
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Download data.json
        run: curl -sLf https://releases.rancher.com/kontainer-driver-metadata/release-v2.11/data.json > ./data.json
      - name: Build and export server
        id: build
        uses: docker/build-push-action@v5
        with:
          push: false
          build-args: |
            VERSION=${{ env.VERSION }}
            COMMIT=${{ env.COMMIT }}
            RKE_VERSION=${{ env.RKE_VERSION }}
            ARCH=${{ env.ARCH }}
            REGISTRY=${{ env.REGISTRY }}
            CATTLE_RANCHER_WEBHOOK_VERSION=${{ env.CATTLE_RANCHER_WEBHOOK_VERSION }}
            CATTLE_RANCHER_PROVISIONING_CAPI_VERSION=${{ env.CATTLE_RANCHER_PROVISIONING_CAPI_VERSION }}
            CATTLE_CSP_ADAPTER_MIN_VERSION=${{ env.CATTLE_CSP_ADAPTER_MIN_VERSION }}
            CATTLE_FLEET_VERSION=${{ env.CATTLE_FLEET_VERSION }}
            CATTLE_DEFAULT_SHELL_VERSION=${{ env.CATTLE_DEFAULT_SHELL_VERSION }}
            CATTLE_REMOTEDIALER_PROXY_VERSION=${{ env.CATTLE_REMOTEDIALER_PROXY_VERSION }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE }}:${{ env.TAG }}-server-${{ env.ARCH }}
          context: .
          platforms: "${{ matrix.os }}/${{ env.ARCH }}"
          file: ./package/Dockerfile
          labels: "${{ steps.meta.outputs.labels }}"
          outputs: type=docker,dest=/tmp/rancher-${{ matrix.os }}-${{ env.ARCH }}.tar
          target: "server"
      - name: Debug built image
        run: |
          docker images ${{ env.REGISTRY }}/${{ env.IMAGE }}:${{ env.TAG }}-server-${{ env.ARCH }}
      - name: Upload image
        uses: actions/upload-artifact@v4
        with:
          name: "rancher-${{ matrix.os }}-${{ env.ARCH }}"
          path: /tmp/rancher-${{ matrix.os }}-${{ env.ARCH }}.tar
          if-no-files-found: error
          retention-days: 4
          overwrite: false

  build-agent:
    needs: [build-server]
    strategy:
      matrix:
        os: [linux]
        arch: [x64, arm64]
    permissions:
      contents: read
      id-token: write
    env:
      ARCH: ${{ matrix.arch }}
    steps:
      - name: Arch environment variable
        shell: bash
        run: |
          if [[ "$ARCH" == "x64" ]]; then
            echo "ARCH=amd64" >> $GITHUB_ENV
          fi
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set Artifact Registry Username
        run: |
          echo "GCP_USERNAME=_json_key" >> $GITHUB_ENV
      - name: Login to Artifact Registry
        uses: docker/login-action@v3
        with:
          username: ${{ env.GCP_USERNAME }}
          password: ${{ secrets.GCP_ARTIFACT_REGISTRY_KEY }}
          registry: ${{ env.REGISTRY }}
      - name: Debug environment variables
        run: |
          echo "TAG=${{ env.TAG }}"
          echo "VERSION=${{ env.VERSION }}"
          env | sort
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_AGENT }}
          flavor: |
            latest=false
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build agent
        id: build
        uses: docker/build-push-action@v5
        with:
          push: false
          build-args: |
            VERSION=${{ env.VERSION }}
            ARCH=${{ env.ARCH }}
            RANCHER_TAG=${{ env.TAG }}
            RANCHER_REPO=${{ env.REPOSITORY_OWNER }}
            REGISTRY=${{ env.REGISTRY }}
            CATTLE_RANCHER_WEBHOOK_VERSION=${{ env.CATTLE_RANCHER_WEBHOOK_VERSION }}
            CATTLE_RANCHER_PROVISIONING_CAPI_VERSION=${{ env.CATTLE_RANCHER_PROVISIONING_CAPI_VERSION }}
            CATTLE_DEFAULT_SHELL_VERSION=${{ env.CATTLE_DEFAULT_SHELL_VERSION }}
            CATTLE_REMOTEDIALER_PROXY_VERSION=${{ env.CATTLE_REMOTEDIALER_PROXY_VERSION }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_AGENT }}:${{ env.TAG }}-agent-${{ env.ARCH }}
          context: .
          platforms: "${{ matrix.os }}/${{ env.ARCH }}"
          file: ./package/Dockerfile
          labels: "${{ steps.meta.outputs.labels }}"
          outputs: type=docker,dest=/tmp/rancher-agent-${{ matrix.os }}-${{ env.ARCH }}.tar
          target: "agent"
      - name: Debug built image
        run: |
          docker images ${{ env.REGISTRY }}/${{ env.IMAGE_AGENT }}:${{ env.TAG }}-agent-${{ env.ARCH }}
      - name: Upload image
        uses: actions/upload-artifact@v4
        with:
          name: "rancher-agent-${{ matrix.os }}-${{ env.ARCH }}"
          path: /tmp/rancher-agent-${{ matrix.os }}-${{ env.ARCH }}.tar
          if-no-files-found: error
          retention-days: 4
          overwrite: false

  push-images:
    needs: [build-agent]
    strategy:
      matrix:
        os: [linux]
        arch: [x64, arm64]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    env:
      ARCH: ${{ matrix.arch }}
    steps:
      - name: Environment variables
        shell: bash
        run: |
          if [[ "$ARCH" == "x64" ]]; then
            echo "ARCH=amd64" >> $GITHUB_ENV
          fi
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Debug environment variables
        run: |
          echo "TAG=${{ env.TAG }}"
          echo "VERSION=${{ env.VERSION }}"
          env | sort
      - name: Download rancher image
        uses: actions/download-artifact@v4
        with:
          pattern: "*-${{ matrix.os }}-${{ env.ARCH }}"
          path: /tmp
          merge-multiple: true
      - name: Set Artifact Registry Username
        run: |
          echo "GCP_USERNAME=_json_key" >> $GITHUB_ENV
      - name: Login to Artifact Registry
        uses: docker/login-action@v3
        with:
          username: ${{ env.GCP_USERNAME }}
          password: ${{ secrets.GCP_ARTIFACT_REGISTRY_KEY }}
          registry: ${{ env.REGISTRY }}
      - name: Push server image
        run: |
          image_id=$(docker load --input /tmp/rancher-${{ matrix.os }}-${{ env.ARCH }}.tar 2>&1 | grep "Loaded image" | awk '{print $NF}')
          if [ -z "$image_id" ]; then
            echo "Error: Failed to load image from tarball!"
            exit 1
          fi
          echo "Loaded server image ID: $image_id"
          # Explicitly retag to override any incorrect tags
          docker tag "$image_id" ${{ env.REGISTRY }}/${{ env.IMAGE }}:${{ env.TAG }}-server-${{ env.ARCH }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE }}:${{ env.TAG }}-server-${{ env.ARCH }}
      - name: Push agent image
        run: |
          image_agent_id=$(docker load --input /tmp/rancher-agent-${{ matrix.os }}-${{ env.ARCH }}.tar 2>&1 | grep "Loaded image" | awk '{print $NF}')
          if [ -z "$image_agent_id" ]; then
            echo "Error: Failed to load image from tarball!"
            exit 1
          fi
          echo "Loaded agent image ID: $image_agent_id"
          # Explicitly retag to override any incorrect tags
          docker tag "$image_agent_id" ${{ env.REGISTRY }}/${{ env.IMAGE_AGENT }}:${{ env.TAG }}-agent-${{ env.ARCH }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_AGENT }}:${{ env.TAG }}-agent-${{ env.ARCH }}

  build-publish-chart:
    needs: [push-images]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    env:
      ARCH: amd64
      CHART_VERSION: 2.11.5
      APP_VERSION: 2.11.5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gawk
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_ARTIFACT_REGISTRY_KEY }}
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}
      - name: Install Helm
        shell: bash
        run: |
          curl -sLf https://get.helm.sh/helm-v3.12.0-linux-amd64.tar.gz | tar xvzf - --strip-components=1 -C /tmp/
          mv /tmp/helm /tmp/helm_v3
          chmod +x /tmp/helm_v3
      - name: Build
        shell: bash
        run: |
          export PATH=/tmp:$PATH
          # Skip sourcing ./version to avoid dynamic versioning
          sed -i 's|\. ./version||' scripts/chart/build
          ./scripts/chart/build chart
      - name: Fix Chart.yaml appVersion
        shell: bash
        run: |
          sed -i 's/appVersion: .*/appVersion: "2.11.5"/' build/chart/rancher/Chart.yaml
      - name: Fix Chart.yaml version
        shell: bash
        run: |
          sed -i 's/version: .*/version: "2.11.5"/' build/chart/rancher/Chart.yaml
      - name: Validate
        shell: bash
        run: |
          export PATH=/tmp:$PATH
          ./scripts/chart/validate
      - name: Package
        shell: bash
        run: |
          export PATH=/tmp:$PATH
          ./scripts/chart/package
      - name: Helm registry login to Artifact Registry
        shell: bash
        run: |
          ACCESS_TOKEN=$(gcloud auth print-access-token)
          /tmp/helm_v3 registry login -u oauth2accesstoken -p "$ACCESS_TOKEN" us-east1-docker.pkg.dev
      - name: Push Helm chart to Artifact Registry
        shell: bash
        run: |
          CHART_TGZ=$(ls ./bin/chart/*/rancher-*.tgz 2>/dev/null)
          if [ -z "$CHART_TGZ" ]; then
            echo "Error: No Helm chart .tgz file found in ./bin/chart/*/"
            exit 1
          fi
          echo "CHART_TGZ: $CHART_TGZ"
          echo "Pushing to: oci://${{ env.REGISTRY }}/${{ vars.GCP_PROJECT_ID }}/rancher-images"
          /tmp/helm_v3 push "$CHART_TGZ" oci://us-east1-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/rancher-images

  merge-server-manifest:
    runs-on: ubuntu-latest
    needs: [push-images]
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Debug environment variables
        run: |
          echo "TAG=${{ env.TAG }}"
          echo "VERSION=${{ env.VERSION }}"
          env | sort
      - name: Set Artifact Registry Username
        run: |
          echo "GCP_USERNAME=_json_key" >> $GITHUB_ENV
      - name: Login to Artifact Registry
        uses: docker/login-action@v3
        with:
          username: ${{ env.GCP_USERNAME }}
          password: ${{ secrets.GCP_ARTIFACT_REGISTRY_KEY }}
          registry: ${{ env.REGISTRY }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Create manifest list and push
        run: |
          docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.IMAGE }}:${{ env.TAG }}-server \
            ${{ env.REGISTRY }}/${{ env.IMAGE }}:${{ env.TAG }}-server-amd64 \
            ${{ env.REGISTRY }}/${{ env.IMAGE }}:${{ env.TAG }}-server-arm64
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE }}:${{ env.TAG }}-server

  merge-agent-manifest:
    runs-on: ubuntu-latest
    needs: [push-images]
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Debug environment variables
        run: |
          echo "TAG=${{ env.TAG }}"
          echo "VERSION=${{ env.VERSION }}"
          env | sort
      - name: Set Artifact Registry Username
        run: |
          echo "GCP_USERNAME=_json_key" >> $GITHUB_ENV
      - name: Login to Artifact Registry
        uses: docker/login-action@v3
        with:
          username: ${{ env.GCP_USERNAME }}
          password: ${{ secrets.GCP_ARTIFACT_REGISTRY_KEY }}
          registry: ${{ env.REGISTRY }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Create manifest list and push
        run: |
          docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.IMAGE_AGENT }}:${{ env.TAG }}-agent \
            ${{ env.REGISTRY }}/${{ env.IMAGE_AGENT }}:${{ env.TAG }}-agent-amd64 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_AGENT }}:${{ env.TAG }}-agent-arm64
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_AGENT }}:${{ env.TAG }}-agent

  build-installer:
    needs: [merge-server-manifest]
    strategy:
      matrix:
        os: [linux]
        arch: [x64, arm64]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    env:
      ARCH: ${{ matrix.arch }}
    steps:
      - name: Environment variables
        shell: bash
        run: |
          if [[ "$ARCH" == "x64" ]]; then
            echo "ARCH=amd64" >> $GITHUB_ENV
          fi
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Debug environment variables
        run: |
          echo "TAG=${{ env.TAG }}"
          echo "VERSION=${{ env.VERSION }}"
          env | sort
      - name: Download chart
        run: |
          mkdir -p chart
          helm pull oci://us-east1-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/rancher-images/rancher --version 2.11.5
          mv rancher-2.11.5.tgz chart
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_INSTALLER }}
          flavor: |
            latest=false
      - name: Set Artifact Registry Username
        run: |
          echo "GCP_USERNAME=_json_key" >> $GITHUB_ENV
      - name: Login to Artifact Registry
        uses: docker/login-action@v3
        with:
          username: ${{ env.GCP_USERNAME }}
          password: ${{ secrets.GCP_ARTIFACT_REGISTRY_KEY }}
          registry: ${{ env.REGISTRY }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push installer
        id: build
        uses: docker/build-push-action@v5
        with:
          push: true
          build-args: |
            VERSION=${{ env.VERSION }}
            ARCH=${{ env.ARCH }}
            BUILDARCH=${{ env.ARCH }}
            REGISTRY=${{ env.REGISTRY }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_INSTALLER }}:${{ env.TAG }}-installer-${{ env.ARCH }}
          context: .
          platforms: "${{ matrix.os }}/${{ env.ARCH }}"
          file: ./package/Dockerfile.installer
          labels: "${{ steps.meta.outputs.labels }}"
      - name: Debug built image
        run: |
          docker images ${{ env.REGISTRY }}/${{ env.IMAGE_INSTALLER }}:${{ env.TAG }}-installer-${{ env.ARCH }}

  merge-installer-manifest:
    runs-on: ubuntu-latest
    needs: [build-installer]
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Debug environment variables
        run: |
          echo "TAG=${{ env.TAG }}"
          echo "VERSION=${{ env.VERSION }}"
          env | sort
      - name: Set Artifact Registry Username
        run: |
          echo "GCP_USERNAME=_json_key" >> $GITHUB_ENV
      - name: Login to Artifact Registry
        uses: docker/login-action@v3
        with:
          username: ${{ env.GCP_USERNAME }}
          password: ${{ secrets.GCP_ARTIFACT_REGISTRY_KEY }}
          registry: ${{ env.REGISTRY }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_INSTALLER }}
          flavor: |
            latest=false
      - name: Create manifest list and push
        run: |
          docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.IMAGE_INSTALLER }}:${{ env.TAG }}-installer \
            ${{ env.REGISTRY }}/${{ env.IMAGE_INSTALLER }}:${{ env.TAG }}-installer-amd64 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_INSTALLER }}:${{ env.TAG }}-installer-arm64
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_INSTALLER }}:${{ env.TAG }}-installer
